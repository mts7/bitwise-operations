version: 2.1

executors:
  php-81:
    docker:
      - image: cimg/php:8.1

orbs:
  php: circleci/php@1.1.0

commands:
  enable_extensions:
    steps:
      - restore_cache:
          name: Restore Cache for pcov
          keys:
            - pecl-v1-{{ checksum "composer.json" }}
            - pecl-v1-
      - run:
          name: Install pcov
          command: sudo pecl -vvv install pcov
      - save_cache:
          name: Save Cache for pcov
          key: pecl-v1-{{ checksum "composer.json" }}
          paths:
            - /usr/local/lib/php/extensions/no-debug-non-zts-20210902
            - /usr/local/lib/php/test/pcov/tests
            - /usr/local/lib/php/doc/pcov
  create_reports_directory:
    steps:
      - run:
          name: Create reports directory
          command: mkdir ~/reports
  install_composer:
    steps:
      - php/install-composer

  install_composer_packages:
    steps:
      - checkout
      - restore_cache:
          name: Restore Composer Package Cache
          keys:
            - composer-v2-{{ checksum "composer.json" }}
            - composer-v2-
      - php/install-packages:
          install-flags: --no-interaction --prefer-dist
          cache-version: php-81-v2
          cache-key: composer.json
      - save_cache:
          name: Save Composer Package Cache
          key: composer-v2-{{ checksum "composer.json" }}
          paths:
            - ~/project/vendor
            - ~/project/composer.lock
            - ~/.composer/cache
  composer_validate:
    steps:
      - run:
          name: Validate composer file
          command: composer validate --no-interaction --ansi

jobs:
  bundle_packages:
    executor: php-81
    steps:
      - checkout
      - install_composer
      - composer_validate
      - install_composer_packages
  unit_test:
    executor: php-81
    steps:
      - checkout
      - install_composer
      - install_composer_packages
      - enable_extensions
      - run:
          name: Unit Tests
          command: php -d pcov.enabled=1 vendor/bin/phpunit --coverage-html ~/reports/code-coverage --log-junit ~/reports/junit.xml
          environment:
            XDEBUG_MODE: coverage
      - store_artifacts:
          path: ~/reports/code-coverage
          destination: code-coverage
      - store_test_results:
          path: ~/reports/junit.xml
  psalm:
    executor: php-81
    steps:
      - checkout
      - install_composer
      - install_composer_packages
      - create_reports_directory
      - run:
          name: Install xsltproc for HTML reporting
          command: |
            sudo apt update
            sudo apt install xsltproc
      - run:
          name: Psalm
          command: vendor/bin/psalm --output-format=xml | xsltproc vendor/roave/psalm-html-output/psalm-html-output.xsl - > ~/reports/psalm.html
      - store_artifacts:
          path: ~/reports/psalm.html
          destination: psalm.html
  mutation:
    executor: php-81
    steps:
      - checkout
      - install_composer
      - install_composer_packages
      - enable_extensions
      - run:
          name: Infection
          command: php -d pcov.enabled=1 -d memory_limit=-1 vendor/bin/infection --threads=4 --min-msi=100 --min-covered-msi=100
      - store_artifacts:
          path: reports/infection.html
          destination: infection.html
  static_analysis:
    executor: php-81
    steps:
      - checkout
      - install_composer
      - install_composer_packages
      - run:
          name: PHP Mess Detector
          command: vendor/bin/phpmd src,tests html phpmd.xml --reportfile ~/reports/phpmd.html
      - store_artifacts:
          path: ~/reports/phpmd.html
          destination: phpmd.html
      - run:
          name: PHPStan
          command: vendor/bin/phpstan analyze --memory-limit=-1 --error-format=prettyJson | tee ~/reports/phpstan.json
      - store_artifacts:
          path: ~/reports/phpstan.json
          destination: phpstan.json
      - run:
          name: Psalm Security Analysis
          command: vendor/bin/psalm --taint-analysis --report=reports/psalm-security.sarif
      - store_artifacts:
          path: reports/psalm-security.sarif
          destination: psalm-security.sarif

workflows:
  build:
    jobs:
      - bundle_packages
      - unit_test:
          requires:
            - bundle_packages
      - static_analysis:
          requires:
            - bundle_packages
      - psalm:
          requires:
            - bundle_packages
      - mutation:
          requires:
            - bundle_packages
